{"version":3,"sources":["components/Preview.js","components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["Preview","__html","marked","this","props","value","sanitize","react_default","a","createElement","id","dangerouslySetInnerHTML","getMarkdownText","React","Component","Editor","onChange","handleChange","name","type","placeholder","App","state","event","_this","setState","target","className","components_Editor","enteredText","components_Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAeeA,4LATX,MAAO,CAAEC,OADOC,IAAOC,KAAKC,MAAMC,MAAO,CAAEC,UAAU,sCAIrD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUC,wBAAyBR,KAAKS,2BAPhCC,IAAMC,WCgBbC,mLAfX,OACER,EAAAC,EAAAC,cAAA,QAAMO,SAAUb,KAAKC,MAAMa,cACzBV,EAAAC,EAAAC,cAAA,YACEC,GAAG,SACHQ,KAAK,WACLC,KAAK,OACLd,MAAOF,KAAKC,MAAMC,OAEjBF,KAAKC,MAAMgB,qBAVDP,IAAMC,WCGrBO,oNACJC,MAAQ,CACNjB,MAAO,MAUTY,aAAe,SAAAM,GACbC,EAAKC,SAAS,CAAEpB,MAAOkB,EAAMG,OAAOrB,4FANpCF,KAAKsB,SAAS,CACZpB,MAAOe,qCAST,OACEb,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aACbpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,UACbpB,EAAAC,EAAAC,cAACmB,EAAD,CACEC,YAAa1B,KAAKE,MAClBY,aAAcd,KAAKc,aACnBG,YAAaA,KAGjBb,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,UACbpB,EAAAC,EAAAC,cAACqB,EAAD,CAASzB,MAAOF,KAAKmB,MAAMjB,kBA5BrBQ,IAAMC,YAoClBM,EAAW,i5CAmDFC,IChFKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0b20ae03.chunk.js","sourcesContent":["import React from \"react\";\nimport marked from \"marked\";\n\nclass Preview extends React.Component {\n  getMarkdownText() {\n    var rawMarkup = marked(this.props.value, { sanitize: true });\n    return { __html: rawMarkup };\n  }\n  render() {\n    return (\n      <div id=\"preview\" dangerouslySetInnerHTML={this.getMarkdownText()} />\n    );\n  }\n}\n\nexport default Preview;\n","import React from \"react\";\n\nclass Editor extends React.Component {\n  render() {\n    return (\n      <form onChange={this.props.handleChange}>\n        <textarea\n          id=\"editor\"\n          name=\"textarea\"\n          type=\"text\"\n          value={this.props.value}\n        >\n          {this.props.placeholder}\n        </textarea>\n      </form>\n    );\n  }\n}\n\nexport default Editor;\n","import React from \"react\";\nimport Preview from \"./components/Preview\";\nimport Editor from \"./components/Editor\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    value: \"\"\n  };\n\n  // This renders the page first, before you update the editor code.\n  componentDidMount() {\n    this.setState({\n      value: placeholder\n    });\n  }\n\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg\">\n            <Editor\n              enteredText={this.value}\n              handleChange={this.handleChange}\n              placeholder={placeholder}\n            />\n          </div>\n          <div className=\"col-lg\">\n            <Preview value={this.state.value} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst placeholder = `# Welcome to the markdown previewer!\n\n## This markdown preview system can be used as a testing environment for you markdown needs\n\n\nWhat if I need more info on the Markup Language?\nCheck out this resource [Markup Cheet Sheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\n\n### Let's talk about some general styling in markup!\n\n**Bold** - can be done by adding 2 asterisks on each side of the word or words you want bold \\`** **\\`\n\n**Images** - can be inserted using the markdown inline style, don't forget the alt text! ![Markdown Logo](https://cdn0.iconfinder.com/data/icons/octicons/1024/markdown-512.png)\n\nNext let's talk about **lists**. super easy to implement! You can number, you can create unordered lists. Whatever kind of list you want, you can do!\n\n1. Item number 1\n2. Item number 2\n  1. Sub Item 1\n  2. Sub Item 2\n* Unordered list item\n* Next unordered list item\n  * Sub list item\n\n**Block Quotes**   \n*   This is the first list item.\n*   Here's the second list item.\n\n    > A blockquote would look great below the second list item.\n\n*   And here's the third list item.\n\nMaybe you want to show a some **inline code**. You can do that by using \\`<h3>Back Ticks</h3>\\`\n\nOr maybe you want to show an entire **code block**:\n\n\\`\\`\\`\nconst Test = () => {\n  return (\n    <div>\n      <h3>This is a test!</h3>\n    </div>\n  );\n}\n \nexport default Test;\n\\`\\`\\`\n\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}